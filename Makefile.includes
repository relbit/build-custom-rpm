SHELL := /bin/bash

-include $(ROOTDIR)Makefile.settings
include $(ROOTDIR)Makefile.includes_general

ifndef RPM_NAME
$(error RPM_NAME not set)
endif

ifndef RPM_SUMMARY
RPM_SUMMARY     = Summary not set in package Makefile
endif

ifndef RPM_LICENSE
$(error RPM_LICENSE not set)
endif

ifndef RPM_VERSION
$(error RPM_VERSION not set)
endif

ifndef RPM_RELEASE
$(error RPM_RELEASE not set)
endif

ifndef RPM_SOURCE0
$(error RPM_SOURCE0 not set)
endif

ifndef RPM_URL
$(error RPM_URL not set)
RPM_URL         = http://source.not.set.in.package.Makefile/
endif

ifndef RPM_SPECFILE
RPM_SPECFILE	= $(RPM_NAME).spec.template
endif

ifndef RPM_PACKAGER
RPM_PACKAGER	= RPM_PACKAGER not set in Makefile.settings
$(warning $(RPM_PACKAGER))
endif

ifndef RPM_DISTRIBUTION
RPM_DISTRIBUTION = $(shell head -n1 /etc/redhat-release)
$(warning RPM_DISTRIBUTION not set in Makefile.settings,\
	defaulting to $(RPM_DISTRIBUTION))
endif

files_to_copy   = $(RPM_SOURCE0) $(RPM_SOURCES)

SPECFILE	= $(specdir)/$(RPM_NAME)-$(RPM_VERSION)-$(RPM_RELEASE).spec

build_default: copy prereq dependencies
	$Vecho "[Build] $(RPM_NAME) $(RPM_VERSION)-$(RPM_RELEASE)"
	$Vpushd $(rpmdir) $(SILENTOUT) && \
	if [ "`find . -type f -name \"$(RPM_NAME)-$(RPM_VERSION)-$(RPM_RELEASE)*x86_64.rpm\" -mtime -1 `" != "" ]; then \
		echo "[Build] $(RPM_NAME) $(RPM_VERSION)-$(RPM_RELEASE) comleted using cached version"; \
	else \
		$(RPMBUILD) $(SILENTOUT) && \
		echo "[Build] $(RPM_NAME) $(RPM_VERSION)-$(RPM_RELEASE) completed"; \
	fi && \
	popd $(SILENTOUT)
	$V$(UNLOCK)

prereq_default: spec
	$Vecho "[Prereq] $(RPM_NAME) $(RPM_VERSION)-$(RPM_RELEASE)"
	$V$(YUM_GINSTALL) development $(SILENTOUT)
	$V$(YUM_INSTALL) rpm-build yum-utils $(SILENTOUT)
	$V$(YUM_BUILDDEP) $(SPECFILE) $(SILENTOUT) || true

spec_default: lock
	$Vecho "[Make] $(RPM_NAME)-$(RPM_VERSION)-$(RPM_RELEASE).spec"
	$Vsed	-e "s/RPM_NAME/$(RPM_NAME)/g" \
		-e "s/RPM_SUMMARY/$(RPM_SUMMARY)/g" \
		-e "s/RPM_SOURCE0/$(RPM_SOURCE0)/g" \
		-e "s/RPM_VERSION/$(RPM_VERSION)/g" \
		-e "s/RPM_LICENSE/$(RPM_LICENSE)/g" \
		-e "s/RPM_DISTRIBUTION/$(RPM_DISTRIBUTION)/g" \
		-e "s/RPM_PACKAGER/$(RPM_PACKAGER)/g" \
		-e "s/RPM_RELEASE/$(RPM_RELEASE)/g" \
		$(RPM_SPECFILE) > $(SPECFILE)
ifdef RPM_VERSIO2
	$Vsed	-e "s/RPM_VERSIO2/$(RPM_VERSIO2)/g" \
		-i $(SPECFILE)
endif
ifdef RPM_VERSIONMAJ
	$Vsed	-e "s/RPM_VERSIONMAJ/$(RPM_VERSIONMAJ)/g" \
		-i $(SPECFILE)
endif
ifdef RPM_VERSIONMIN
	$Vsed	-e "s/RPM_VERSIONMIN/$(RPM_VERSIONMIN)/g" \
		-i $(SPECFILE)
endif
ifdef RPM_SOURCEN0
	$Vsed	-e "s/RPM_SOURCEN0/$(RPM_SOURCEN0)/g" \
		-i $(SPECFILE)
endif

copy_files	= $(addprefix copy_,$(files_to_copy))
copy_default:	  $(copy_files)
$(copy_files):	  download
	$Vfile="`echo $@ | sed -e 's/^copy_//g'`" && \
	echo "[Copy] $$file" && \
	cp -f $$file $(sourcedir)/; \
	[ -f $(sourcedir)/$$file ]

download_default: lock
	$V[ ! -f $(RPM_SOURCE0) ] && \
		echo "[Download] $(RPM_SOURCE0)" && \
		curl $(SILENTCURL) -L $(RPM_URL) \
			-o $(RPM_SOURCE0) $(SILENTOUT) || \
	[ -f $(RPM_SOURCE0) ]

install_default: build lock
	$Vrpms="`find $(rpmdir) -type f -name "*$(RPM_NAME)*rpm" ! -name "*debuginfo*"`"; \
	echo "[Install] $(RPM_NAME)"; \
	$(YUM_LINSTALL) $$rpms $(SILENTOUT)
	$V$(UNLOCK)

uninstall_default: lock
	$Vrpms="`rpm -qa | grep -P \"^$(RPM_NAME)\"`"; \
	echo "[REMOVE] $$rpms"; \
	if [ "$$rpms" != "" ]; then \
		$(YUM_REMOVE) $$rpms; \
	fi;
	$V$(UNLOCK)


ifdef RPM_BUILD_DEP
define newline


endef
$(eval \
$(subst #,$(newline),\
$(shell deps=1; \
	function makedep { \
		echo -en 'function makedep {' \
		echo -en 'echo "[Dependency] '; \
		echo JCQ= | base64 -d; \
		echo -en '1 for package $(RPM_NAME)";'; \
		echo -en 'cd $(ROOTDIR)'; \
		echo JCQ= | base64 -d; \
		echo -en '1 && $(MAKE) '; \
		echo JCQ= | base64 -d; \
		echo -en '2 $(MFLAGS);'; \
		echo -en '};'; \
		echo -en  'makedep '; \
	}; \
	echo $(RPM_BUILD_DEP) | \
	sed -e 's/;/\n/g' | \
	while read line; do \
		echo -en "dependency.$${deps}:\
				#\t+$V`makedep` $${line};"; \
		echo -en "#"; \
		let "deps+=1"; \
	done; \
	echo -en "#dependencies: lock "; \
	for i in `seq 1 $${deps}`; do \
		echo -en "dependency.$$i "; \
	done; \
	echo -en "#";)))
else
dependencies:
	$V:;
endif
clean_default: lock
	$Vecho "[Clean] $(RPM_NAME)"
	$Vrm -f $(SPECFILE)
	$Vrm -f $(foreach f,$(files_to_copy),$(sourcedir)/$f)
	$Vrm -f $(RPM_SOURCE0)
lock:
	$V[ ! -d $(builddir) ] && mkdir -p $(builddir); \
	[ ! -d $(rpmdir) ] && mkdir -p $(rpmdir); \
	[ ! -d $(sourcedir) ] && mkdir -p $(sourcedir); \
	[ ! -d $(specdir) ] && mkdir -p $(specdir); \
	spins=0; \
	[ -f .make_lock ] && [ ! -f /proc/`cat .make_lock`/mountstats ] && $(UNLOCK); \
	while [ -f .make_lock ]; do \
		let "spins+=1"; \
		echo "[Lock] $(RPM_NAME) spin $$spins"; \
		sleep 1; \
		[ -f .make_lock ] && [ ! -f /proc/`cat .make_lock`/mountstats ] && $(UNLOCK); \
	done; \
	echo $$PPID > .make_lock
	$Vecho "[Lock] $(RPM_NAME)"


unlock:
	$V$(UNLOCK)
